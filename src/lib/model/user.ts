import { z } from "zod";
import { user, session } from "@prisma/client";

// export type AppUser = user

export type AppSession = session  

export const AuthProviders = z.enum(["google","github","email-password"])
type AuthProviders = z.infer<typeof AuthProviders>

export const AppUser = z.object(
    {
        id: z.string().cuid().uuid().optional(),
        email: z.string().email().optional(),
        firstname: z.string().optional(),
        lastname: z.string().optional(),
        password: z.string().min(6).optional(),
        user_id: z.string().optional(),
        provider: AuthProviders.optional(),
        emailVerified: z.boolean().default(false),
        inactive_at: z.date().nullable().default(null),
        created_at: z.date().optional(),
        updated_at: z.date().optional(),
    }
);
  
  // id is omitted below because it is generated by Prisma
//   export const AppUser = z.optional(UserSchema)
export type AppUser = z.infer<typeof AppUser>

export const toAppUser = (usr: Omit<user, 'password'>): AppUser | null => {
  const {id, email, inactive_at, created_at, updated_at} = usr
  return {
    id, email, inactive_at, created_at, updated_at,
    firstname: usr.firstname ?? "",
    lastname: usr.lastname ?? "",
    user_id: usr.user_id ?? "",
    emailVerified: usr.emailVerified ?? false,
    provider: AuthProviders.parse(usr.provider)
  }
}